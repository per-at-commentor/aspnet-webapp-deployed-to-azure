name: 21 Update environment

on:
  workflow_dispatch:
    inputs:
      ENV_NAME:
        description: Environment name
        type: environment
        required: true
  workflow_call:
    inputs:
      ENV_NAME:
        description: Environment name
        type: string
        required: true

jobs:
  terraform_plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENV_NAME }}
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.7.0

      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Prepare changes
        run: |
          cd terraform
          export ARM_SUBSCRIPTION_ID="${{ vars.WORKFLOW_AZURE_SUBSCRIPTION_ID }}"
          export ARM_TENANT_ID="${{ vars.WORKFLOW_AZURE_TENANT_ID }}"
          export ARM_CLIENT_ID="${{ vars.WORKFLOW_AZURE_CLIENT_ID }}"
          export ARM_CLIENT_SECRET="${{ secrets.WORKFLOW_AZURE_CLIENT_SECRET }}"

          echo '::group::Prepare Terraform variables'
          echo 'APP_NAME = "${{ vars.APP_NAME }}"' >> terraform.tfvars
          echo 'ENV_NAME = "${{ inputs.ENV_NAME }}"' >> terraform.tfvars
          cat ${{ vars.ENV_TYPE }}.tfvars >> terraform.tfvars
          cat terraform.tfvars
          echo '::endgroup::'

          echo '::group::Terraform init'
          terraform init \
            -backend-config="resource_group_name=${{ vars.TERRAFORM_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.TERRAFORM_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.TERRAFORM_STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=${{ vars.APP_NAME }}-${{ inputs.ENV_NAME }}.tfstate"
          echo '::endgroup::'

          echo '::group::Terraform validate'
          terraform validate
          echo '::endgroup::'

          echo '::group::Terraform plan'
          terraform plan -out=tfplan
          echo '::endgroup::'

      - name: Upload prepared changes
        uses: actions/upload-artifact@v4.2.0
        with:
          name: tf-files
          path: |
            terraform/terraform.tfvars
            terraform/.terraform.lock.hcl
            terraform/tfplan

  terraform_apply:
    runs-on: ubuntu-latest
    needs: terraform_plan
    environment: ${{ inputs.ENV_NAME }}
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.7.0

      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Download prepared changes
        uses: actions/download-artifact@v4.1.1
        with:
          name: tf-files
          path: terraform

      - name: Apply prepared changes
        id: tf_apply
        run: |
          cd terraform
          export ARM_SUBSCRIPTION_ID="${{ vars.WORKFLOW_AZURE_SUBSCRIPTION_ID }}"
          export ARM_TENANT_ID="${{ vars.WORKFLOW_AZURE_TENANT_ID }}"
          export ARM_CLIENT_ID="${{ vars.WORKFLOW_AZURE_CLIENT_ID }}"
          export ARM_CLIENT_SECRET="${{ secrets.WORKFLOW_AZURE_CLIENT_SECRET }}"

          echo '::group::Terraform init'
          terraform init \
            -backend-config="resource_group_name=${{ vars.TERRAFORM_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ vars.TERRAFORM_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.TERRAFORM_STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=${{ vars.APP_NAME }}-${{ inputs.ENV_NAME }}.tfstate"
          echo '::endgroup::'

          echo '::group::Terraform apply'
          terraform apply tfplan
          echo '::endgroup::'

          echo "RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "WEBAPP_NAME=$(terraform output -raw webapp_name)" >> $GITHUB_OUTPUT

      - name: Save environment variables
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ENV_NAME: ${{ inputs.ENV_NAME }}
          RESOURCE_GROUP_NAME: ${{ steps.tf_apply.outputs.RESOURCE_GROUP_NAME }}
          WEBAPP_NAME: ${{ steps.tf_apply.outputs.WEBAPP_NAME }}
        run: |
          gh variable set RESOURCE_GROUP_NAME -R $REPO -e $ENV_NAME -b $RESOURCE_GROUP_NAME
          gh variable set WEBAPP_NAME -R $REPO -e $ENV_NAME -b $WEBAPP_NAME

