name: OLD Create new environment

on:
  workflow_dispatch:
    inputs:
      ENV_NAME:
        description: Environment name
        type: string
        required: true

jobs:
  create-env:
    runs-on: ubuntu-latest
    steps:
      - name: Validate input
        run: |
          [[ "${{ inputs.ENV_NAME }}" =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]] || (echo "::error::Environment name must start with a letter and only contain letters and numbers" && exit 1)

      - uses: azure/login@v1.6.1
        with:
          creds: |
            {
              "clientId": "${{ vars.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ vars.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ vars.AZURE_TENANT_ID }}"
            }

      - name: Create Azure Resources
        uses: azure/CLI@v1.0.9
        id: azure
        with:
          azcliversion: 2.56.0
          inlineScript: |
            RESOURCE_GROUP_NAME=webapp-${{ inputs.ENV_NAME }}-rg
            TERRAFORM_STORAGE_ACCOUNT_NAME=terraform$RANDOM
            TERRAFORM_STORAGE_CONTAINER_NAME=terraform

            echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
            echo "TERRAFORM_STORAGE_ACCOUNT_NAME=$TERRAFORM_STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
            echo "TERRAFORM_STORAGE_CONTAINER_NAME=$TERRAFORM_STORAGE_CONTAINER_NAME" >> $GITHUB_OUTPUT

            echo "=== CREATE AZURE RESOURCE GROUP [$RESOURCE_GROUP_NAME] ==="
            az group create --name $RESOURCE_GROUP_NAME --location westeurope

            echo "=== CREATE TERRAFORM STORAGE ACCOUNT [$TERRAFORM_STORAGE_ACCOUNT_NAME] ==="
            az storage account create --resource-group $RESOURCE_GROUP_NAME --name $TERRAFORM_STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob

            echo "=== CREATE TERRAFORM STORAGE CONTAINER [$TERRAFORM_STORAGE_CONTAINER_NAME] ==="
            az storage container create --name $TERRAFORM_STORAGE_CONTAINER_NAME --account-name $TERRAFORM_STORAGE_ACCOUNT_NAME --auth-mode login

            echo "=== GET TERRAFORM STORAGE ACCESS KEY ==="
            TERRAFORM_STORAGE_ACCOUNT_ACCESS_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $TERRAFORM_STORAGE_ACCOUNT_NAME --query '[0].value' -o tsv)
            echo "::add-mask::$TERRAFORM_STORAGE_ACCOUNT_ACCESS_KEY"
            echo "TERRAFORM_STORAGE_ACCOUNT_ACCESS_KEY=$TERRAFORM_STORAGE_ACCOUNT_ACCESS_KEY" >> $GITHUB_OUTPUT

      - name: Create GitHub Environment
        env:
          # the token must have read and write permissions to "Administration", "Environment", "Secrets" and "Variables"
          GH_TOKEN: ${{ secrets.ENV_CREATION_TOKEN }}
          ENV_NAME: ${{ inputs.ENV_NAME }}
          REPO: ${{ github.repository }}
        run: |
          echo "=== CREATE GITHUB ENV [$ENV_NAME] ==="
          gh api --method PUT repos/$REPO/environments/$ENV_NAME

          echo "=== SAVE VARIABLES ==="
          gh variable set RESOURCE_GROUP_NAME -R $REPO -e $ENV_NAME -b "${{ steps.azure.outputs.RESOURCE_GROUP_NAME }}"
          gh variable set TERRAFORM_STORAGE_ACCOUNT_NAME -R $REPO -e $ENV_NAME -b "${{ steps.azure.outputs.TERRAFORM_STORAGE_ACCOUNT_NAME }}"
          gh variable set TERRAFORM_STORAGE_CONTAINER_NAME -R $REPO -e $ENV_NAME -b "${{ steps.azure.outputs.TERRAFORM_STORAGE_CONTAINER_NAME }}"

          echo "=== SAVE SECRETS ==="
          gh secret set TERRAFORM_STORAGE_ACCOUNT_ACCESS_KEY -R $REPO -e $ENV_NAME -b "${{ steps.azure.outputs.TERRAFORM_STORAGE_ACCOUNT_ACCESS_KEY }}"
