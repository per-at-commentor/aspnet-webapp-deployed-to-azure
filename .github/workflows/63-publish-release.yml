name: 63 Publish release

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      RELEASE_BRANCH:
        type: string

jobs:
  publish-release:
    runs-on: ubuntu-latest
    steps:
    - name: Resolve branch
      id: release-branch
      env:
        RELEASE_BRANCH: ${{ inputs.RELEASE_BRANCH }}
      run: |
        [[ -z $RELEASE_BRANCH ]] && RELEASE_BRANCH=$GITHUB_REF_NAME
        echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
        echo "Branch: $RELEASE_BRANCH"

    - name: Checkout
      uses: actions/checkout@v4.1.1
      with:
        ref: ${{ steps.release-branch.outputs.RELEASE_BRANCH }}
    
    - name: Get version
      id: version
      run: |
        RELEASE_VERSION=$(sed -znE -e "s|.*<VersionPrefix>[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+)[[:space:]]*</VersionPrefix>.*|\1|p" src/WebApplication1/WebApplication1.csproj)
        [[ -z $RELEASE_VERSION ]] && (echo "::error::Version not found" && exit 1)

        echo "Current version $RELEASE_VERSION"
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT

        RELEASE_MAJOR=$(echo $RELEASE_VERSION | sed -nE "s|([0-9]+)\.([0-9]+)\.([0-9]+)|\1|p")
        RELEASE_MINOR=$(echo $RELEASE_VERSION | sed -nE "s|([0-9]+)\.([0-9]+)\.([0-9]+)|\2|p")
        RELEASE_PATCH=$(echo $RELEASE_VERSION | sed -nE "s|([0-9]+)\.([0-9]+)\.([0-9]+)|\3|p")
        echo "RELEASE_MAJOR=$RELEASE_MAJOR" >> $GITHUB_OUTPUT
        echo "RELEASE_MINOR=$RELEASE_MINOR" >> $GITHUB_OUTPUT
        echo "RELEASE_PATCH=$RELEASE_PATCH" >> $GITHUB_OUTPUT

    - name: Publish GitHub release
      env:
        RELEASE_VERSION: ${{ steps.version.outputs.RELEASE_VERSION }}
        RELEASE_BRANCH: ${{ steps.release-branch.outputs.RELEASE_BRANCH }}
      run: |
        gh release edit $RELEASE_VERSION --draft=false

    - name: Set Git user info
      run: |
        git config user.name "Workflow"
        git config user.email ""

    - name: Bump patch version
      env:
        RELEASE_MAJOR: ${{ steps.version.outputs.RELEASE_MAJOR }}
        RELEASE_MINOR: ${{ steps.version.outputs.RELEASE_MINOR }}
        RELEASE_PATCH: ${{ steps.version.outputs.RELEASE_PATCH }}
      run: |
        NEXT_MAJOR=$RELEASE_MAJOR
        NEXT_MINOR=$RELEASE_MINOR
        NEXT_PATCH=$(echo $RELEASE_PATCH | awk '{$NF += 1 ; print}')
        NEXT_VERSION="$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH"
        echo "Next patch version: $NEXT_VERSION"

        sed -i -znE -e "s|(.*<VersionPrefix>[[:space:]]*)([0-9]+\.[0-9]+\.[0-9]+)([[:space:]]*</VersionPrefix>.*)|\1$NEXT_VERSION\3|p" src/WebApplication1/WebApplication1.csproj
        git commit -a -m "Update version to $NEXT_VERSION"
        git push